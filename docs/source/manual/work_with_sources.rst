********************
Working with sources
********************

The Source abstraction
**********************
The main abstraction of Agilepy is the Source object. It is described by several parameters, some of which can be free to vary, updated by 
the mle() analysis.

The set of the parameters describing the source can vary, depending on the spectrum and spatial model types of the source. 


The different types of sources are described `here <../manual/source_file.html#source-library-format-xml-document>`_.

The parameters' values of a source object can be inspected easily:

::

    print(source)
    -----------------------------------------------------------
    Source name: 2AGLJ1045-5954 (PointSource)
    * Position:
        - start_pos: (287.697, -0.788886)
        - dist from (l,b): 24.2159
    * Spectrum: (PowerLaw)
        - flux: 1.80893e-07
        - index: 2.0414
    * Free params: none
    -----------------------------------------------------------

Most of the time the user will rely on the `AGAnalysis <../api/analysis_api.html#api-AGAnalysis-AGAnalysis>`_ class methods in order to 
interact with the sources within the SourceLibrary object. The SourceLibrary object contains all the sources loaded by the user for its 
current analysis. 

How to load or add new sources
******************************
The first required step to perform scientific analysis, is to load the model of one or more sources within the SourceLibrary object. There 
are several ways to do that.

The `loadSourcesFromCatalog(catalogName, rangeDist=0, inf, show=False) <../api/analysis_api.html#api-AGAnalysis-AGAnalysis-loadSourcesFromCatalog>`_ 
allows to load a source catalog, while filtering the sources by their distance (degree) from the l,b position provided within the configuration file.

::

    sources = ag.loadSourcesFromCatalog('2AGL', rangeDist=(0, 10))


The `loadSourcesFromFile(sourcesFilepath, rangeDist=0, inf, show=False) <../api/analysis_api.html#api-AGAnalysis-AGAnalysis-loadSourcesFromFile>`_
loads the sources, reading their model from a file. 

The `addSource(sourceName, sourceDict) <../api/analysis_api.html#api-AGAnalysis-AGAnalysis-addSource>`_ method allows the user to define on the fly a 
source model with a python dictionary. Check the tutorial notebooks for an example. 


How to let the source's parameters to vary
******************************************
In order to free or fix a sources' parameter, the user can rely on the `freeSources(selection, parameterName, free, show=False) <../api/analysis_api.html#api-AGAnalysis-AGAnalysis-freeSources>`_
method. The sources can be selected via the "selection" argument, supporting either lambda functions and boolean expression strings. Please, check
the `selectSources(selection, show=False) <../api/analysis_api.html#api-AGAnalysis-AGAnalysis-selectSources>`_ method documentation for more informations.

::
    
    aganalysis.freeSources(lambda name, dist, flux : Name == "2AGLJ2021+4029" AND dist > 0 AND flux > 0, "flux", True)

Check the api documentation or the tutorial notebooks for additional examples. 

How to check which source's parameters are free to vary
*******************************************************
The user can obtain this information by printing out the Source object or calling the getFreeParams() method (not documented) of the Source object.

::

    print(source)
    -----------------------------------------------------------
    Source name: 2AGLJ1045-5954 (PointSource)
    * Position:
        - start_pos: (287.697, -0.788886)
        - dist from (l,b): 24.2159
    * Spectrum: (PowerLaw)
        - flux: 1.80893e-07
        - index: 2.0414
    * Free params: flux
    -----------------------------------------------------------
    
    print(source.getFreeParams())
    ['flux']

The "multi" description of a Source object
******************************************
A Source object is also described by a set of values (they can't vary) generated by the mle() analysis. Indeed, when the mle() analysis 
is performed, the user can print out the Source object and it will show the multi values. 

::

    print(source)
    -----------------------------------------------------------
    Source name: 2AGLJ0835-4514 (PointSource) => sqrt(ts): 16.4703
    * Position:
        - start_pos: (263.585, -2.84083)
        - dist from (l,b): 0.0702
    * Spectrum: (PLSuperExpCutoff)
        - flux: 1.0155e-05
        - index1: 1.71345
        - cutoffEnergy: 3913.06
        - index2: 1.34774
    * Free params: flux
    * Multi analysis:
        - flux(ph/cm2s): 1.0155e-05 +- 1.0248e-06
        - upper limit(ph/cm2s): 1.23073e-05
        - ergLog(erg/cm2s): 1.64122e-09 +- 1.65624e-10
        - galCoeff: [0.819911]
        - isoCoeff: [10.1463]
        - exposure(cm2s): 18630100.0
        - exp-ratio: 0.0
    -----------------------------------------------------------

Furthermode, when the "pos" parameter is free to vary, the multi values section will show additional values:

:: 

  * Multi analysis:
	- flux(ph/cm2s): 1.0155e-05 +- 1.0248e-06
	- upper limit(ph/cm2s): 1.23073e-05
	- ergLog(erg/cm2s): 1.64122e-09 +- 1.65624e-10
	- galCoeff: [0.819911]
	- isoCoeff: [10.1463]
	- exposure(cm2s): 18630100.0
	- exp-ratio: 0.0
	- L_peak: 263.585
	- B_peak: -2.84083
	- distFromStartPos: 8.53774e-07
	- ellipse:
	    - L: -1.0
	    - B: -1.0
	    - distFromStartPos: -1.0
	    - r: -1.0
	    - a: -1.0
	    - b: -1.0
	    - phi: -1.0

How to manually change the spectrum parameters' values of a source
******************************************************************
The user can call the set() method (not documented) of the Spectrum object within the Source object. 

:: 

    source.spectrum.set("index2", 1.34774)

How to manually change the position parameters' values of a source
******************************************************************
The user can rely on the `updateSourcePosition(sourceName, glon, glat) <../api/analysis_api.html#api-AGAnalysis-AGAnalysis-updateSourcePosition>`_ 
method.



